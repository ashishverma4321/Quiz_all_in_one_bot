import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from ai_generator import generate_mcq

BOT_TOKEN = os.getenv("BOT_TOKEN")

user_scores = {}
user_language = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдПрдХ Quiz Bot рд╣реВрдБ ЁЯза\n"
        "рдХреЛрдИ рднреА subject рднреЗрдЬреЗрдВ рдЬреИрд╕реЗ: /quiz Transistor\n"
        "рдФрд░ рдореИрдВ рдЙрд╕ рдкрд░ AI рд╕реЗ рд╕рд╡рд╛рд▓ рдмрдирд╛рдКрдБрдЧрд╛ред\n"
        "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдирдиреЗ рдХреЗ рд▓рд┐рдП /language Hindi рдпрд╛ English рд▓рд┐рдЦреЗрдВред"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ЁЯУЪ Commands:\n"
        "/start - Bot рд╢реБрд░реВ рдХрд░реЗрдВ\n"
        "/quiz <subject> - рдХрд┐рд╕реА рднреА рд╡рд┐рд╖рдп рдкрд░ рд╕рд╡рд╛рд▓\n"
        "/language Hindi/English - рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ\n"
        "/help - рдорджрдж\n\n"
        "ЁЯФз Coming Soon:\nтЬЕ рд╕реНрдХреЛрд░\nтЬЕ рдХрдард┐рдирд╛рдИ рд╕реНрддрд░\nтЬЕ рд▓реАрдбрд░рдмреЛрд░реНрдб"
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text("рдХреГрдкрдпрд╛ рднрд╛рд╖рд╛ рдмрддрд╛рдЗрдП: Hindi рдпрд╛ English\nрдЙрджрд╛рд╣рд░рдг: /language English")
        return

    lang = context.args[0].strip().capitalize()
    if lang not in ["Hindi", "English"]:
        await update.message.reply_text("рдХреЗрд╡рд▓ Hindi рдпрд╛ English рдЪреБрди рд╕рдХрддреЗ рд╣реИрдВред")
        return

    user_language[user_id] = lang
    await update.message.reply_text(f"тЬЕ рдЖрдкрдХреА рднрд╛рд╖рд╛ '{lang}' рд╕реЗрдЯ рдХрд░ рджреА рдЧрдИ рд╣реИред")

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lang = user_language.get(user_id, "Hindi")

    if not context.args:
        await update.message.reply_text("рдХреГрдкрдпрд╛ рд╡рд┐рд╖рдп рдмрддрд╛рдЗрдПред рдЬреИрд╕реЗ: /quiz Control System")
        return

    subject = " ".join(context.args)
    await update.message.reply_text(f"ЁЯФН рд╡рд┐рд╖рдп: {subject}\nЁЯУЪ рднрд╛рд╖рд╛: {lang}\nMCQ рддреИрдпрд╛рд░ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...")

    mcq = generate_mcq(subject, lang)
    if mcq:
        await update.message.reply_text(mcq)
    else:
        await update.message.reply_text("тЭМ рд╕рд╡рд╛рд▓ рд▓рд╛рдиреЗ рдореЗрдВ рджрд┐рдХреНрдХрдд рд╣реБрдИред рдмрд╛рдж рдореЗрдВ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("quiz", quiz))
app.add_handler(CommandHandler("language", set_language))

if __name__ == "__main__":
    app.run_polling()
